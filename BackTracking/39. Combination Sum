class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<int>tmp;
        vector<vector<int>>res;
        int start=0,remain=target;
        backTracking(res,tmp,candidates,start,remain);
        return res;
    }
    void backTracking(vector<vector<int>> &res,vector<int> &tmp,vector<int> &candidates,int start,int remain)
    {
        if(remain<0)
            return;
        else if(remain==0)
            res.push_back(tmp);
        else
        {
            for(int i=start;i<candidates.size();i++)
            {
                if(i>0&&candidates[i]==candidates[i-1])
                    continue;
                tmp.push_back(candidates[i]);
                backTracking(res,tmp,candidates,i,remain-candidates[i]);
                tmp.pop_back();
            }
        }
        return;
    }
};
